// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributorServiceClient is the client API for DistributorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributorServiceClient interface {
	JoinCluster(ctx context.Context, in *ClusterClientOffer, opts ...grpc.CallOption) (DistributorService_JoinClusterClient, error)
	UploadResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error)
}

type distributorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributorServiceClient(cc grpc.ClientConnInterface) DistributorServiceClient {
	return &distributorServiceClient{cc}
}

func (c *distributorServiceClient) JoinCluster(ctx context.Context, in *ClusterClientOffer, opts ...grpc.CallOption) (DistributorService_JoinClusterClient, error) {
	stream, err := c.cc.NewStream(ctx, &DistributorService_ServiceDesc.Streams[0], "/DistributorService/JoinCluster", opts...)
	if err != nil {
		return nil, err
	}
	x := &distributorServiceJoinClusterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DistributorService_JoinClusterClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type distributorServiceJoinClusterClient struct {
	grpc.ClientStream
}

func (x *distributorServiceJoinClusterClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *distributorServiceClient) UploadResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/DistributorService/UploadResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributorServiceServer is the server API for DistributorService service.
// All implementations must embed UnimplementedDistributorServiceServer
// for forward compatibility
type DistributorServiceServer interface {
	JoinCluster(*ClusterClientOffer, DistributorService_JoinClusterServer) error
	UploadResult(context.Context, *Result) (*Empty, error)
	mustEmbedUnimplementedDistributorServiceServer()
}

// UnimplementedDistributorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistributorServiceServer struct {
}

func (UnimplementedDistributorServiceServer) JoinCluster(*ClusterClientOffer, DistributorService_JoinClusterServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (UnimplementedDistributorServiceServer) UploadResult(context.Context, *Result) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadResult not implemented")
}
func (UnimplementedDistributorServiceServer) mustEmbedUnimplementedDistributorServiceServer() {}

// UnsafeDistributorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributorServiceServer will
// result in compilation errors.
type UnsafeDistributorServiceServer interface {
	mustEmbedUnimplementedDistributorServiceServer()
}

func RegisterDistributorServiceServer(s grpc.ServiceRegistrar, srv DistributorServiceServer) {
	s.RegisterService(&DistributorService_ServiceDesc, srv)
}

func _DistributorService_JoinCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClusterClientOffer)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DistributorServiceServer).JoinCluster(m, &distributorServiceJoinClusterServer{stream})
}

type DistributorService_JoinClusterServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type distributorServiceJoinClusterServer struct {
	grpc.ServerStream
}

func (x *distributorServiceJoinClusterServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _DistributorService_UploadResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).UploadResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributorService/UploadResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).UploadResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributorService_ServiceDesc is the grpc.ServiceDesc for DistributorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DistributorService",
	HandlerType: (*DistributorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadResult",
			Handler:    _DistributorService_UploadResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinCluster",
			Handler:       _DistributorService_JoinCluster_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "distributor-service.proto",
}

// CliServiceClient is the client API for CliService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CliServiceClient interface {
	Transcode(ctx context.Context, in *TranscodeRequest, opts ...grpc.CallOption) (*TranscodeResponse, error)
	Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (CliService_ProgressClient, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error)
}

type cliServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCliServiceClient(cc grpc.ClientConnInterface) CliServiceClient {
	return &cliServiceClient{cc}
}

func (c *cliServiceClient) Transcode(ctx context.Context, in *TranscodeRequest, opts ...grpc.CallOption) (*TranscodeResponse, error) {
	out := new(TranscodeResponse)
	err := c.cc.Invoke(ctx, "/CliService/Transcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (CliService_ProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &CliService_ServiceDesc.Streams[0], "/CliService/Progress", opts...)
	if err != nil {
		return nil, err
	}
	x := &cliServiceProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CliService_ProgressClient interface {
	Recv() (*ProgressResponse, error)
	grpc.ClientStream
}

type cliServiceProgressClient struct {
	grpc.ClientStream
}

func (x *cliServiceProgressClient) Recv() (*ProgressResponse, error) {
	m := new(ProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cliServiceClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error) {
	out := new(RetrieveResponse)
	err := c.cc.Invoke(ctx, "/CliService/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CliServiceServer is the server API for CliService service.
// All implementations must embed UnimplementedCliServiceServer
// for forward compatibility
type CliServiceServer interface {
	Transcode(context.Context, *TranscodeRequest) (*TranscodeResponse, error)
	Progress(*ProgressRequest, CliService_ProgressServer) error
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error)
	mustEmbedUnimplementedCliServiceServer()
}

// UnimplementedCliServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCliServiceServer struct {
}

func (UnimplementedCliServiceServer) Transcode(context.Context, *TranscodeRequest) (*TranscodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transcode not implemented")
}
func (UnimplementedCliServiceServer) Progress(*ProgressRequest, CliService_ProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedCliServiceServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedCliServiceServer) mustEmbedUnimplementedCliServiceServer() {}

// UnsafeCliServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CliServiceServer will
// result in compilation errors.
type UnsafeCliServiceServer interface {
	mustEmbedUnimplementedCliServiceServer()
}

func RegisterCliServiceServer(s grpc.ServiceRegistrar, srv CliServiceServer) {
	s.RegisterService(&CliService_ServiceDesc, srv)
}

func _CliService_Transcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).Transcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/Transcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).Transcode(ctx, req.(*TranscodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_Progress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CliServiceServer).Progress(m, &cliServiceProgressServer{stream})
}

type CliService_ProgressServer interface {
	Send(*ProgressResponse) error
	grpc.ServerStream
}

type cliServiceProgressServer struct {
	grpc.ServerStream
}

func (x *cliServiceProgressServer) Send(m *ProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CliService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CliService_ServiceDesc is the grpc.ServiceDesc for CliService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CliService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CliService",
	HandlerType: (*CliServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transcode",
			Handler:    _CliService_Transcode_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _CliService_Retrieve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Progress",
			Handler:       _CliService_Progress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "distributor-service.proto",
}
