// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transcoding-service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_383f50a2c64b1b9b, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
}

func init() { proto.RegisterFile("transcoding-service.proto", fileDescriptor_383f50a2c64b1b9b) }

var fileDescriptor_383f50a2c64b1b9b = []byte{
	// 107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x29, 0x4a, 0xcc,
	0x2b, 0x4e, 0xce, 0x4f, 0xc9, 0xcc, 0x4b, 0xd7, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x34, 0x32,
	0xe2, 0x12, 0x0a, 0x41, 0xa8, 0x0a, 0x86, 0x28, 0x12, 0x92, 0xe1, 0xe2, 0x00, 0x4b, 0x07, 0x05,
	0x38, 0x0b, 0xb1, 0xe9, 0x81, 0x99, 0x52, 0x50, 0x5a, 0x89, 0xc1, 0x89, 0x27, 0x8a, 0xab, 0x20,
	0x3b, 0x5d, 0x3f, 0xb1, 0x20, 0x53, 0xbf, 0xcc, 0x30, 0x89, 0x0d, 0x6c, 0xa2, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x03, 0x7e, 0xed, 0xf2, 0x6e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TranscodingServiceClient is the client API for TranscodingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranscodingServiceClient interface {
	EmptyRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type transcodingServiceClient struct {
	cc *grpc.ClientConn
}

func NewTranscodingServiceClient(cc *grpc.ClientConn) TranscodingServiceClient {
	return &transcodingServiceClient{cc}
}

func (c *transcodingServiceClient) EmptyRPC(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/TranscodingService/EmptyRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscodingServiceServer is the server API for TranscodingService service.
type TranscodingServiceServer interface {
	EmptyRPC(context.Context, *Empty) (*Empty, error)
}

// UnimplementedTranscodingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTranscodingServiceServer struct {
}

func (*UnimplementedTranscodingServiceServer) EmptyRPC(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyRPC not implemented")
}

func RegisterTranscodingServiceServer(s *grpc.Server, srv TranscodingServiceServer) {
	s.RegisterService(&_TranscodingService_serviceDesc, srv)
}

func _TranscodingService_EmptyRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscodingServiceServer).EmptyRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TranscodingService/EmptyRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscodingServiceServer).EmptyRPC(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TranscodingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TranscodingService",
	HandlerType: (*TranscodingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmptyRPC",
			Handler:    _TranscodingService_EmptyRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transcoding-service.proto",
}
